#include<stdio.h>
#include<stdlib.h>
#include"init.cpp"

#define LIST_INIT_SIZE 100
#define LISTINCREMENT 10

typedef struct {
	int* elem;
	int length;
	int list_size;
}SQList;

//初始化
int initSQList(SQList& L) {
	L.elem = (int*)malloc(LIST_INIT_SIZE * sizeof(int));
	if (!L.elem) exit(0);
	L.length = 0;
	L.list_size = LIST_INIT_SIZE;
	return OK;
}

//插入元素
int ListInsert(SQList& L, int i, int e) {
	//在顺序表的第i个元素之前插入元素e
	if (i < 1 || i > L.length + 1) return ERROR;
	if (L.length >= L.list_size) {
		int* newbase = (int*)realloc(L.elem, (L.list_size + LISTINCREMENT) * sizeof(int));
		if (!newbase) exit(OVERFLOW);
		L.elem = newbase;
		L.list_size += LISTINCREMENT;
	}
	int* q = &(L.elem[i - 1]);
	for (int* p = &(L.elem[L.length - 1]); p >= q; --p) *(p + 1) = *p;
	*q = e;
	L.length++;
	return OK;
}

//删除元素
int ListDelete_SQ(SQList& L, int i, int& e) {
	//删除第i个元素，用e返回
	if (i < 1 || i > L.length) return ERROR;
	int* p = &L.elem[i - 1];
	e = *p;
	int* q = L.elem + L.length - 1;
	for (++p; p <= q; ++p) *(p - 1) = *p;
	L.length--;
	return OK;
}

int LocateElem_SQ(SQList& L, int e) {
	int i = 1;
	int* p = L.elem;
	while (i < L.length && *p++ != e) i++;
	if (i <= L.length) return i;
	else return ERROR;
}

void MegerList_SQ(SQList& L1, SQList& L2) {
	//L1和L2的值按非递减排列
	//归并L1和L2得到L3，L3中的值也按非递减排列
	//此算法保证L1的长度+L2的长度<=LIST_INIT_SIZE
	int* p1 = L1.elem;
	int* p2 = L2.elem;
	SQList L3;
	initSQList(L3);
	int* p3 = L3.elem;
	int* p1_last = p1 + L1.length - 1;
	int* p2_last = p2 + L2.length - 1;
	while (p1 <= p1_last && p2 < p2_last) {
		if (*p1 <= *p2) *p3++ = *p1++;
		else *p3++ = *p2++;
	}
	while (p1 <= p1_last) *p3++ = *p1++;
	while (p2 <= p2_last) *p3++ = *p2++;
}

